// <auto-generated />
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250228114139_UpdateEntitiesAndSeedData")]
    partial class UpdateEntitiesAndSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.EducationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("Domain.Entities.HobbyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HobbyName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("HobbyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HobbyTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Hobby");
                });

            modelBuilder.Entity("Domain.Entities.HobbyTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HobbyTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("HobbyType");
                });

            modelBuilder.Entity("Domain.Entities.PositionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = "2021-01-01",
                            Role = "Software Developer Intern",
                            StartDate = "2020-01-01",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            EndDate = "2022-01-01",
                            Role = "Software Developer",
                            StartDate = "2021-01-02",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            EndDate = "",
                            Role = "Junior Software Engineer",
                            StartDate = "2022-01-02",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            EndDate = "2021-01-01",
                            Role = "Software Developer",
                            StartDate = "2020-01-01",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            EndDate = "",
                            Role = "Mechanical Mathematician",
                            StartDate = "2021-01-02",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            EndDate = "",
                            Role = "Astrophysicist",
                            StartDate = "2020-01-01",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.PositionResponsibilityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("Responsibility")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionResponsibility");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PositionId = 1,
                            Responsibility = "Assist in software development tasks"
                        },
                        new
                        {
                            Id = 2,
                            PositionId = 1,
                            Responsibility = "Write and maintain code"
                        },
                        new
                        {
                            Id = 3,
                            PositionId = 1,
                            Responsibility = "Collaborate with team members"
                        },
                        new
                        {
                            Id = 4,
                            PositionId = 1,
                            Responsibility = "Participate in code reviews"
                        },
                        new
                        {
                            Id = 5,
                            PositionId = 1,
                            Responsibility = "Assist in testing and debugging"
                        },
                        new
                        {
                            Id = 6,
                            PositionId = 2,
                            Responsibility = "Develop new software features"
                        },
                        new
                        {
                            Id = 7,
                            PositionId = 2,
                            Responsibility = "Maintain existing codebase"
                        },
                        new
                        {
                            Id = 8,
                            PositionId = 2,
                            Responsibility = "Collaborate with cross-functional teams"
                        },
                        new
                        {
                            Id = 9,
                            PositionId = 2,
                            Responsibility = "Review and refactor code"
                        },
                        new
                        {
                            Id = 10,
                            PositionId = 2,
                            Responsibility = "Document development processes"
                        },
                        new
                        {
                            Id = 11,
                            PositionId = 3,
                            Responsibility = "Assist in software design"
                        },
                        new
                        {
                            Id = 12,
                            PositionId = 3,
                            Responsibility = "Implement software solutions"
                        },
                        new
                        {
                            Id = 13,
                            PositionId = 3,
                            Responsibility = "Collaborate with developers"
                        },
                        new
                        {
                            Id = 14,
                            PositionId = 3,
                            Responsibility = "Participate in Agile processes"
                        },
                        new
                        {
                            Id = 15,
                            PositionId = 3,
                            Responsibility = "Assist in system testing"
                        },
                        new
                        {
                            Id = 16,
                            PositionId = 4,
                            Responsibility = "Develop software components"
                        },
                        new
                        {
                            Id = 17,
                            PositionId = 4,
                            Responsibility = "Maintain technical documentation"
                        },
                        new
                        {
                            Id = 18,
                            PositionId = 4,
                            Responsibility = "Work with QA team"
                        },
                        new
                        {
                            Id = 19,
                            PositionId = 4,
                            Responsibility = "Review pull requests"
                        },
                        new
                        {
                            Id = 20,
                            PositionId = 4,
                            Responsibility = "Fix software bugs"
                        },
                        new
                        {
                            Id = 21,
                            PositionId = 5,
                            Responsibility = "Conduct mathematical analysis"
                        },
                        new
                        {
                            Id = 22,
                            PositionId = 5,
                            Responsibility = "Develop mathematical models"
                        },
                        new
                        {
                            Id = 23,
                            PositionId = 5,
                            Responsibility = "Collaborate with engineering teams"
                        },
                        new
                        {
                            Id = 24,
                            PositionId = 5,
                            Responsibility = "Present findings and recommendations"
                        },
                        new
                        {
                            Id = 25,
                            PositionId = 5,
                            Responsibility = "Document mathematical solutions"
                        },
                        new
                        {
                            Id = 26,
                            PositionId = 6,
                            Responsibility = "Conduct astrophysical research"
                        },
                        new
                        {
                            Id = 27,
                            PositionId = 6,
                            Responsibility = "Analyze astronomical data"
                        },
                        new
                        {
                            Id = 28,
                            PositionId = 6,
                            Responsibility = "Collaborate with research teams"
                        },
                        new
                        {
                            Id = 29,
                            PositionId = 6,
                            Responsibility = "Present research findings"
                        },
                        new
                        {
                            Id = 30,
                            PositionId = 6,
                            Responsibility = "Publish research papers"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProfessionalStatementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProfessionalObjective")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProfessionalSummary")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ProfessionalStatement");
                });

            modelBuilder.Entity("Domain.Entities.ProjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("GithubUrl")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Domain.Entities.ProjectTechnologyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("ProjectTechnology");
                });

            modelBuilder.Entity("Domain.Entities.ProjectTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProjectTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProjectType");
                });

            modelBuilder.Entity("Domain.Entities.SkillEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SkillTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillTypeId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("Domain.Entities.SkillTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SkillTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SkillType");
                });

            modelBuilder.Entity("Domain.Entities.SocialMediaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SocialMediaName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SocialMediaUrl")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMedia");
                });

            modelBuilder.Entity("Domain.Entities.TechnologyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TechnologyName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Technology");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            MiddleName = "Henry",
                            PhoneNumber = ""
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane@email.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            MiddleName = "",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = 3,
                            Email = "kev@email.com",
                            FirstName = "Kevin",
                            LastName = "Kelvin",
                            MiddleName = "James",
                            PhoneNumber = "0987654321"
                        },
                        new
                        {
                            Id = 4,
                            Email = "charlie@email.com",
                            FirstName = "Charlie",
                            LastName = "Thompson",
                            MiddleName = "",
                            PhoneNumber = ""
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserSkillEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkill");
                });

            modelBuilder.Entity("Domain.Entities.EducationEntity", b =>
                {
                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.HobbyEntity", b =>
                {
                    b.HasOne("Domain.Entities.HobbyTypeEntity", "HobbyType")
                        .WithMany("Hobbies")
                        .HasForeignKey("HobbyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Hobbies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HobbyType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.PositionEntity", b =>
                {
                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Positions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.PositionResponsibilityEntity", b =>
                {
                    b.HasOne("Domain.Entities.PositionEntity", "Position")
                        .WithMany("Responsibilities")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Domain.Entities.ProfessionalStatementEntity", b =>
                {
                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("ProfessionalStatements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ProjectEntity", b =>
                {
                    b.HasOne("Domain.Entities.ProjectTypeEntity", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ProjectTechnologyEntity", b =>
                {
                    b.HasOne("Domain.Entities.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TechnologyEntity", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("Domain.Entities.SkillEntity", b =>
                {
                    b.HasOne("Domain.Entities.SkillTypeEntity", "SkillType")
                        .WithMany()
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("Domain.Entities.SocialMediaEntity", b =>
                {
                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("SocialMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserSkillEntity", b =>
                {
                    b.HasOne("Domain.Entities.SkillEntity", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.HobbyTypeEntity", b =>
                {
                    b.Navigation("Hobbies");
                });

            modelBuilder.Entity("Domain.Entities.PositionEntity", b =>
                {
                    b.Navigation("Responsibilities");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Hobbies");

                    b.Navigation("Positions");

                    b.Navigation("ProfessionalStatements");

                    b.Navigation("Projects");

                    b.Navigation("SocialMedias");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
